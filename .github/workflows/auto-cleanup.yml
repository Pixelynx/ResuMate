name: Auto-Delete Cleanup

on:
  push:
    branches:
      - main
      - config/scheduler
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
    # Allow manual trigger for testing
    inputs:
      force_cleanup:
        description: 'Force cleanup even if disabled'
        required: false
        default: 'false'
        type: boolean

env:
  # Workflow timeout (should be less than 30 minutes to avoid overlap)
  WORKFLOW_TIMEOUT: 25

jobs:
  cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
          CLEANUP_API_KEY: ${{ secrets.CLEANUP_API_KEY }}
          ENABLE_AUTO_DELETE: ${{ secrets.ENABLE_AUTO_DELETE }}
          TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
    
    steps:
      - name: Validate environment configuration
        run: |
          echo "Validating required environment variables..."
          
          if [ -z "$REACT_APP_API_URL" ]; then
            echo "REACT_APP_API_URL secret not configured"
            exit 1
          fi
          
          if [ -z "$CLEANUP_API_KEY" ]; then
            echo "CLEANUP_API_KEY secret not configured"
            exit 1
          fi
          
          echo "Environment validation passed"
          echo "API Base URL: $REACT_APP_API_URL"
          echo "Auto Delete Enabled: $ENABLE_AUTO_DELETE"
          echo "Test Email Configured: $([ -n "$TEST_EMAIL" ] && echo 'yes' || echo 'no')"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'
      
      - name: Debug secrets
        run: |
          echo "Checking secret availability..."
          echo "REACT_APP_API_URL length: ${#REACT_APP_API_URL}"
          echo "CLEANUP_API_KEY length: ${#CLEANUP_API_KEY}"
          
          # Check if secrets are set (without revealing values)
          if [ -n "$REACT_APP_API_URL" ]; then
            echo "REACT_APP_API_URL is set"
          else
            echo "REACT_APP_API_URL is NOT set"
          fi
          
          if [ -n "$CLEANUP_API_KEY" ]; then
            echo "CLEANUP_API_KEY is set"
          else
            echo "CLEANUP_API_KEY is NOT set"
          fi

      - name: Validate environment configuration
        run: |
          echo "Validating required environment variables..."
          
          if [ -z "$REACT_APP_API_URL" ]; then
            echo "REACT_APP_API_URL secret not configured"
            exit 1
          fi
          
          if [ -z "$CLEANUP_API_KEY" ]; then
            echo "CLEANUP_API_KEY secret not configured"
            exit 1
          fi
          
          echo "Environment validation passed"
          echo "API Base URL: $REACT_APP_API_URL"
          echo "Auto Delete Enabled: $ENABLE_AUTO_DELETE"
          echo "Test Email Configured: $([ -n "$TEST_EMAIL" ] && echo 'yes' || echo 'no')"
      
      - name: Debug URL construction
        run: |
          echo "=== URL DEBUGGING ==="
          echo "Base API URL: '$REACT_APP_API_URL'"
          echo "URL length: ${#REACT_APP_API_URL}"
          
          # Clean the URL (remove any whitespace/newlines)
          CLEAN_URL=$(echo "$REACT_APP_API_URL" | tr -d '[:space:]')
          echo "Cleaned URL: '$CLEAN_URL'"
          
          # Check for common URL issues
          if [[ "$REACT_APP_API_URL" == *" "* ]]; then
            echo "[WARNING] URL contains spaces"
          fi
          
          if [[ "$REACT_APP_API_URL" == *$'\n'* ]]; then
            echo "[WARNING] URL contains newlines"
          fi
          
          if [[ "$REACT_APP_API_URL" == *$'\r'* ]]; then
            echo "[WARNING] URL contains carriage returns"
          fi
          
          # Show the constructed URLs
          HEALTH_URL="${CLEAN_URL}/admin/health"
          CLEANUP_URL="${CLEAN_URL}/admin/cleanup"
          
          echo "Constructed Health URL: '$HEALTH_URL'"
          echo "Constructed Cleanup URL: '$CLEANUP_URL'"
          
          # Test basic connectivity to the base URL
          echo "Testing base URL connectivity..."
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" --max-time 10 "$CLEAN_URL" || echo "HTTPSTATUS:000")
          http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          echo "Base URL response code: $http_code"
          
          # Test the health endpoint specifically
          echo "Testing health endpoint..."
          health_response=$(curl -s -w "HTTPSTATUS:%{http_code}" --max-time 10 "$HEALTH_URL" || echo "HTTPSTATUS:000")
          health_code=$(echo "$health_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          echo "Health endpoint response code: $health_code"
          
          if [ "$health_code" -eq 404 ]; then
            echo "[FAILED] Health endpoint returns 404 - check if /admin/health exists"
          elif [ "$health_code" -eq 000 ]; then
            echo "[FAILED] Could not connect to health endpoint"
          else
            echo "[SUCCESS] Health endpoint responded with code: $health_code"
          fi

      - name: Validate cleanup
        id: cleanup_validation
        run: |
          echo "Validate cleanup process..."
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
          # Clean the URL (remove any whitespace/newlines)
          CLEAN_URL=$(echo "$REACT_APP_API_URL" | tr -d '[:space:]')
          CLEANUP_URL="${CLEAN_URL}/admin/cleanup"
          
          echo "Using cleaned URL: '$CLEANUP_URL'"
          
          # Prepare headers
          if [ -n "$CLEANUP_API_KEY" ]; then
            AUTH_HEADER="Authorization: Bearer $CLEANUP_API_KEY"
          else
            echo "No API key available for authentication"
            exit 1
          fi
          
          # Execute cleanup with more detailed error handling
          echo "Attempting cleanup request..."
          response=$(timeout 300 curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "$AUTH_HEADER" \
            -H "User-Agent: GitHub-Actions-Auto-Cleanup/1.0" \
            -v \
            "$CLEANUP_URL" 2>&1 || echo "HTTPSTATUS:000")
          
          echo "Raw curl response:"
          echo "$response"
          echo "--- End of raw response ---"
          
          http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -e 's/HTTPSTATUS\:.*//g')
          
          echo "Cleanup response code: $http_code"
          echo "Cleanup response body: $body"

      - name: Prepare cleanup
        id: cleanup_prep
        run: |
          echo "Prepping cleanup process..."
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
          # Clean the URL (remove any whitespace/newlines)
          CLEAN_URL=$(echo "$REACT_APP_API_URL" | tr -d '[:space:]')
          CLEANUP_URL="${CLEAN_URL}/admin/cleanup"
          
          echo "Using cleaned URL: '$CLEANUP_URL'"
          
          # Prepare headers
          if [ -n "$CLEANUP_API_KEY" ]; then
            AUTH_HEADER="Authorization: Bearer $CLEANUP_API_KEY"
          else
            echo "No API key available for authentication"
            exit 1
          fi
          
          # Execute cleanup with more detailed error handling
          echo "Attempting cleanup request..."
          response=$(timeout 300 curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "$AUTH_HEADER" \
            -H "User-Agent: GitHub-Actions-Auto-Cleanup/1.0" \
            -v \
            "$CLEANUP_URL" 2>&1 || echo "HTTPSTATUS:000")
          
          echo "Raw curl response:"
          echo "$response"
          echo "--- End of raw response ---"
          
          http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -e 's/HTTPSTATUS\:.*//g')
          
          echo "Cleanup response code: $http_code"
          echo "Cleanup response body: $body"

      - name: Debug cleanup
        id: cleanup_debug
        run: |
          echo "Debug cleanup process..."
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
          # Clean the URL (remove any whitespace/newlines)
          CLEAN_URL=$(echo "$REACT_APP_API_URL" | tr -d '[:space:]')
          CLEANUP_URL="${CLEAN_URL}/admin/cleanup"
          
          echo "Using cleaned URL: '$CLEANUP_URL'"
          
          # Prepare headers
          if [ -n "$CLEANUP_API_KEY" ]; then
            AUTH_HEADER="Authorization: Bearer $CLEANUP_API_KEY"
          else
            echo "No API key available for authentication"
            exit 1
          fi
          
          # Execute cleanup with more detailed error handling
          echo "Attempting cleanup request..."
          response=$(timeout 300 curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "$AUTH_HEADER" \
            -H "User-Agent: GitHub-Actions-Auto-Cleanup/1.0" \
            -v \
            "$CLEANUP_URL" 2>&1 || echo "HTTPSTATUS:000")
          
          echo "Raw curl response:"
          echo "$response"
          echo "--- End of raw response ---"
          
          http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -e 's/HTTPSTATUS\:.*//g')
          
          echo "Cleanup response code: $http_code"
          echo "Cleanup response body: $body"
          
      - name: Health check
        id: health_check
        run: |
          echo "Performing health check..."
          
          # Clean the URL
          CLEAN_URL=$(echo "$REACT_APP_API_URL" | tr -d '[:space:]')
          HEALTH_URL="${CLEAN_URL}/admin/health"
          
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" "$HEALTH_URL" || echo "HTTPSTATUS:000")
          http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -e 's/HTTPSTATUS\:.*//g')
          
          echo "Health check response code: $http_code"
          echo "Health check response body: $body"
          
          if [ "$http_code" -eq 200 ]; then
            echo "Health check passed"
            echo "health_status=healthy" >> $GITHUB_OUTPUT
          else
            echo "Health check failed with status $http_code"
            echo "health_status=unhealthy" >> $GITHUB_OUTPUT
            
            # Don't fail the workflow for health check failures
            # We'll still attempt cleanup but log the issue
            echo "Proceeding with cleanup despite health check failure"
          fi
      
      - name: Execute cleanup
        id: cleanup_execution
        run: |
          echo "Executing cleanup process..."
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
          # Clean the URL
          CLEAN_URL=$(echo "$REACT_APP_API_URL" | tr -d '[:space:]')
          CLEANUP_URL="${CLEAN_URL}/admin/cleanup"
          
          # Prepare headers
          if [ -n "$CLEANUP_API_KEY" ]; then
            AUTH_HEADER="Authorization: Bearer $CLEANUP_API_KEY"
          else
            echo "No API key available for authentication"
            exit 1
          fi
          
          # Execute cleanup with timeout
          response=$(timeout 300 curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "$AUTH_HEADER" \
            -H "User-Agent: GitHub-Actions-Auto-Cleanup/1.0" \
            "$CLEANUP_URL" || echo "HTTPSTATUS:000")
          
          http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -e 's/HTTPSTATUS\:.*//g')
          
          echo "Cleanup response code: $http_code"
          echo "Cleanup response body: $body"
          
          # Parse response for statistics
          if [ "$http_code" -eq 200 ]; then
            echo "Cleanup completed successfully"
            
            # Extract statistics using basic text parsing
            resumes_deleted=$(echo "$body" | grep -o '"resumesDeleted":[0-9]*' | grep -o '[0-9]*' || echo "0")
            cover_letters_deleted=$(echo "$body" | grep -o '"coverLettersDeleted":[0-9]*' | grep -o '[0-9]*' || echo "0")
            execution_time=$(echo "$body" | grep -o '"executionTime":[0-9]*' | grep -o '[0-9]*' || echo "0")
            
            echo "cleanup_status=success" >> $GITHUB_OUTPUT
            echo "resumes_deleted=$resumes_deleted" >> $GITHUB_OUTPUT
            echo "cover_letters_deleted=$cover_letters_deleted" >> $GITHUB_OUTPUT
            echo "execution_time=$execution_time" >> $GITHUB_OUTPUT
            
            echo "Cleanup Statistics:"
            echo "   - Resumes deleted: $resumes_deleted"
            echo "   - Cover letters deleted: $cover_letters_deleted"
            echo "   - Execution time: ${execution_time}ms"
            
          elif [ "$http_code" -eq 401 ]; then
            echo "Authentication failed - check CLEANUP_API_KEY"
            echo "cleanup_status=auth_failed" >> $GITHUB_OUTPUT
            exit 1
            
          elif [ "$http_code" -eq 404 ]; then
            echo "Cleanup endpoint not found - check if /admin/cleanup exists"
            echo "cleanup_status=not_found" >> $GITHUB_OUTPUT
            exit 1
            
          elif [ "$http_code" -eq 429 ]; then
            echo "Rate limit exceeded - will retry next scheduled run"
            echo "cleanup_status=rate_limited" >> $GITHUB_OUTPUT
            exit 0
            
          else
            echo "Cleanup failed with status $http_code"
            echo "cleanup_status=failed" >> $GITHUB_OUTPUT
            echo "Response: $body"
            exit 1
          fi
      
      - name: Report results
        if: always()
        run: |
          echo "=== Auto-Cleanup Workflow Results ==="
          echo "Workflow run: ${{ github.run_number }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "Health status: ${{ steps.health_check.outputs.health_status || 'unknown' }}"
          echo "Cleanup status: ${{ steps.cleanup_execution.outputs.cleanup_status || 'not_executed' }}"
          
          if [ "${{ steps.cleanup_execution.outputs.cleanup_status }}" = "success" ]; then
            echo "Resumes deleted: ${{ steps.cleanup_execution.outputs.resumes_deleted || '0' }}"
            echo "Cover letters deleted: ${{ steps.cleanup_execution.outputs.cover_letters_deleted || '0' }}"
            echo "Execution time: ${{ steps.cleanup_execution.outputs.execution_time || '0' }}ms"
          fi
          
          echo "=================================="
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "Auto-cleanup workflow failed!"
          echo "This requires immediate attention to prevent data accumulation."
          echo "Check the workflow logs and server health."
          echo "Consider manual cleanup if the issue persists."
          
          # Create issue comment or notification here if needed
          # For now, we'll rely on GitHub's built-in failure notifications